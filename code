<!DOCTYPE html>
<html lang="th">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Daily Finance — Pink/Grey/White</title>
  <!-- Tailwind (CDN) -->
  <script src="https://cdn.tailwindcss.com"></script>
  <!-- Chart.js (CDN) -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <!-- Firebase v9 compat (CDN) -->
  <script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-app-compat.js"></script>
  <script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-auth-compat.js"></script>
  <script src="https://www.gstatic.com/firebasejs/9.23.0/firebase-firestore-compat.js"></script>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Prompt:wght@300;400;500;600;700&display=swap" rel="stylesheet">
  <style>
    :root{
      --pink:#f472b6; /* tailwind pink-400 */
      --pink-50:#fdf2f8; /* pink-50 */
      --pink-100:#fce7f3; /* pink-100 */
      --pink-600:#db2777; /* pink-600 */
      --gray-50:#f9fafb; --gray-100:#f3f4f6; --gray-200:#e5e7eb; --gray-700:#374151;
      --white:#ffffff;
    }
    html,body{height:100%;}
    body{font-family:'Prompt',system-ui,-apple-system,Segoe UI,Roboto,sans-serif;background:var(--gray-50);color:#1f2937}
    .card{background:var(--white);border-radius:1rem;box-shadow:0 8px 24px rgba(0,0,0,.06)}
    .btn{border-radius:1rem;padding:.75rem 1rem;font-weight:600;box-shadow:0 6px 16px rgba(244,114,182,.25)}
    .btn-primary{background:var(--pink);color:#fff}
    .btn-primary:hover{filter:brightness(.95)}
    .btn-outline{background:#fff;color:var(--pink-600);border:2px solid var(--pink-100)}
    .floating-bar{position:fixed;left:0;right:0;bottom:0;padding:1rem;background:rgba(255,255,255,.85);backdrop-filter:blur(8px);box-shadow:0 -8px 24px rgba(0,0,0,.06)}
    .sheet{position:fixed;left:0;right:0;bottom:-100%;background:#fff;border-top-left-radius:1.25rem;border-top-right-radius:1.25rem;box-shadow:0 -10px 30px rgba(0,0,0,.15);transition:bottom .3s ease}
    .sheet.open{bottom:0}
    .chip{background:var(--pink-50);color:var(--pink-600);padding:.35rem .7rem;border-radius:999px;border:1px solid var(--pink-100);font-size:.85rem}
    .input{border:1.5px solid var(--gray-200);border-radius:.9rem;padding:.7rem .9rem;width:100%;}
    .input:focus{outline:none;border-color:var(--pink)}
  </style>
</head>
<body class="min-h-screen">
  <!-- Screen 1: Login -->
  <section id="screen-login" class="min-h-screen flex items-center justify-center bg-pink-50">
    <div class="card w-full max-w-md p-8 text-center">
      <h1 class="text-2xl font-bold text-pink-600">เข้าสู่ระบบ</h1>
      <p class="mt-2 text-gray-600">Daily Finance — เก็บ 30% ใช้ 70%</p>

      <button id="btnGoogle" class="btn btn-outline w-full mt-6">เข้าสู่ระบบด้วย Google</button>
      <div class="mt-6 text-sm text-gray-500">หรือ</div>
      <div class="mt-4 space-y-3 text-left">
        <input id="email" class="input" type="email" placeholder="อีเมล" />
        <input id="password" class="input" type="password" placeholder="รหัสผ่าน" />
        <div class="grid grid-cols-2 gap-3">
          <button id="btnEmailLogin" class="btn btn-primary">เข้าสู่ระบบ</button>
          <button id="btnRegister" class="btn btn-outline">สร้างบัญชี</button>
        </div>
      </div>
    </div>
  </section>

  <!-- Screen 2: Summary (Yesterday) -->
  <section id="screen-summary" class="hidden min-h-screen">
    <header class="px-5 pt-6 pb-3 flex items-center justify-between">
      <h2 class="text-xl font-semibold text-pink-600">สรุปของเมื่อวาน</h2>
      <div class="flex items-center gap-2">
        <span id="whoami" class="chip">—</span>
        <button id="btnLogout" class="chip">ออกจากระบบ</button>
      </div>
    </header>

    <main class="px-5 pb-28 grid gap-5">
      <!-- Card: Chart -->
      <div class="card p-5">
        <div class="flex items-center justify-between">
          <div>
            <div id="yesterdayLabel" class="text-sm text-gray-500">—</div>
            <div class="text-lg font-semibold">รายรับ vs รายจ่าย</div>
          </div>
        </div>
        <canvas id="barChart" height="130" class="mt-3"></canvas>
      </div>

      <!-- Card: Numbers -->
      <div class="card p-5">
        <div class="grid grid-cols-2 gap-4 text-center">
          <div>
            <div class="text-gray-500 text-sm">รายรับรวม</div>
            <div id="sumIncome" class="text-2xl font-bold text-green-600">0</div>
          </div>
          <div>
            <div class="text-gray-500 text-sm">รายจ่ายรวม</div>
            <div id="sumExpense" class="text-2xl font-bold text-red-600">0</div>
          </div>
          <div>
            <div class="text-gray-500 text-sm">เงินเก็บ (30%)</div>
            <div id="sumSaving" class="text-xl font-semibold">0</div>
          </div>
          <div>
            <div class="text-gray-500 text-sm">ยอดคงเหลือ (จาก 70%)</div>
            <div id="sumRemaining" class="text-xl font-semibold">0</div>
          </div>
        </div>
      </div>

      <!-- Quick tips -->
      <div class="p-4 text-sm text-gray-600">
        <span class="chip">Tips</span>
        ถ้าวันนี้ใช้ไม่หมดจากส่วน 70% ระบบจะนับเป็น "ยอดคงเหลือของวันนั้น" และไม่ไปรวมวันถัดไปอัตโนมัติ (ทำเพื่อความง่ายในการติดตามรายวัน)
      </div>
    </main>

    <!-- Floating action bar -->
    <div class="floating-bar">
      <div class="max-w-3xl mx-auto grid grid-cols-2 gap-3">
        <button id="openIncome" class="btn btn-primary">+ รายรับ</button>
        <button id="openExpense" class="btn btn-outline">- รายจ่าย</button>
      </div>
    </div>
  </section>

  <!-- Screen 3: Bottom Sheet — Add Income -->
  <div id="sheet-income" class="sheet">
    <div class="p-5">
      <div class="h-1 w-12 bg-gray-200 rounded-full mx-auto mb-4"></div>
      <div class="flex items-center justify-between">
        <h3 class="text-lg font-semibold text-pink-600">เพิ่มรายรับ</h3>
        <button class="chip" onclick="closeSheet('sheet-income')">ปิด</button>
      </div>
      <div class="mt-4 grid gap-3">
        <label class="text-sm text-gray-600">ประเภท</label>
        <select id="incomeCategory" class="input">
          <option>เงินเดือน</option>
          <option>เงินโบนัสพิเศษ</option>
          <option>รายได้เสริม</option>
          <option>ดอกเบี้ย/เงินปันผล</option>
          <option>อื่น ๆ</option>
        </select>

        <label class="text-sm text-gray-600 mt-2">จำนวนเงิน (บาท)</label>
        <input id="incomeAmount" type="number" class="input" placeholder="เช่น 1000" />

        <label class="text-sm text-gray-600 mt-2">บันทึก (ไม่บังคับ)</label>
        <textarea id="incomeNote" class="input" rows="3" placeholder="เช่น เงินเดือนส.ค."></textarea>

        <button id="saveIncome" class="btn btn-primary mt-2">บันทึกรายรับ</button>
      </div>
      <div class="text-xs text-gray-500 mt-3">ระบบจะแบ่งอัตโนมัติ: เก็บ 30% | ใช้ 70%</div>
    </div>
  </div>

  <!-- Screen 4: Bottom Sheet — Add Expense -->
  <div id="sheet-expense" class="sheet">
    <div class="p-5">
      <div class="h-1 w-12 bg-gray-200 rounded-full mx-auto mb-4"></div>
      <div class="flex items-center justify-between">
        <h3 class="text-lg font-semibold text-pink-600">เพิ่มรายจ่าย</h3>
        <button class="chip" onclick="closeSheet('sheet-expense')">ปิด</button>
      </div>
      <div class="mt-4 grid gap-3">
        <label class="text-sm text-gray-600">ประเภท</label>
        <select id="expenseCategory" class="input">
          <option>ค่าอาหาร</option>
          <option>ค่าเดินทาง</option>
          <option>ค่าน้ำ</option>
          <option>ค่าไฟ</option>
          <option>ค่าอินเทอร์เน็ต</option>
          <option>ช้อปปิ้ง</option>
          <option>สันทนาการ</option>
          <option>สุขภาพ</option>
          <option>อื่น ๆ</option>
        </select>

        <label class="text-sm text-gray-600 mt-2">จำนวนเงิน (บาท)</label>
        <input id="expenseAmount" type="number" class="input" placeholder="เช่น 150" />

        <label class="text-sm text-gray-600 mt-2">บันทึก (ไม่บังคับ)</label>
        <textarea id="expenseNote" class="input" rows="3" placeholder="เช่น ข้าวกลางวัน"></textarea>

        <button id="saveExpense" class="btn btn-primary mt-2">บันทึกรายจ่าย</button>
      </div>
    </div>
  </div>

  <script>
    // ====== Utils ======
    const qs = (sel, root=document) => root.querySelector(sel);
    const show = (id) => { qs('#'+id).classList.remove('hidden'); };
    const hide = (id) => { qs('#'+id).classList.add('hidden'); };
    const openSheet = (id) => qs('#'+id).classList.add('open');
    const closeSheet = (id) => qs('#'+id).classList.remove('open');

    // Date helpers (use local time)
    const pad2 = (n)=> String(n).padStart(2,'0');
    function toYMD(d){ return `${d.getFullYear()}-${pad2(d.getMonth()+1)}-${pad2(d.getDate())}` }
    function getYesterday(){ const d=new Date(); d.setDate(d.getDate()-1); return d; }

    // ====== Firebase Init (replace with your config) ======
    const firebaseConfig = {
      apiKey: "YOUR_API_KEY",
      authDomain: "YOUR_AUTH_DOMAIN",
      projectId: "YOUR_PROJECT_ID",
      appId: "YOUR_APP_ID",
    };
    firebase.initializeApp(firebaseConfig);
    const auth = firebase.auth();
    const db = firebase.firestore();

    // ====== Auth UI ======
    const screenLogin = qs('#screen-login');
    const screenSummary = qs('#screen-summary');

    // Buttons
    qs('#btnGoogle').addEventListener('click', async ()=>{
      const provider = new firebase.auth.GoogleAuthProvider();
      try{ await auth.signInWithPopup(provider); }catch(e){ alert(e.message); }
    });

    qs('#btnEmailLogin').addEventListener('click', async ()=>{
      const email = qs('#email').value.trim();
      const password = qs('#password').value;
      if(!email || !password) return alert('กรอกอีเมลและรหัสผ่าน');
      try{ await auth.signInWithEmailAndPassword(email,password); }
      catch(e){ alert(e.message); }
    });

    qs('#btnRegister').addEventListener('click', async ()=>{
      const email = qs('#email').value.trim();
      const password = qs('#password').value;
      if(!email || !password) return alert('กรอกอีเมลและรหัสผ่าน');
      try{ await auth.createUserWithEmailAndPassword(email,password); }
      catch(e){ alert(e.message); }
    });

    qs('#btnLogout').addEventListener('click', ()=> auth.signOut());

    // Switch screen on auth state
    auth.onAuthStateChanged(user=>{
      if(user){
        hide('screen-login');
        show('screen-summary');
        qs('#whoami').textContent = user.displayName||user.email||'ผู้ใช้';
        renderYesterday();
      }else{
        show('screen-login');
        hide('screen-summary');
      }
    });

    // ====== Bar Chart ======
    let chartRef=null;
    function renderChart(income, expense){
      const ctx = document.getElementById('barChart').getContext('2d');
      if(chartRef){ chartRef.destroy(); }
      chartRef = new Chart(ctx, {
        type: 'bar',
        data: {
          labels: ['รายรับ','รายจ่าย'],
          datasets: [{
            data: [income, expense],
            borderWidth: 1
          }]
        },
        options: {
          responsive:true,
          plugins:{ legend:{display:false} },
          scales:{ y:{ beginAtZero:true } }
        }
      });
    }

    // ====== Data IO ======
    function txCol(){ const uid = auth.currentUser.uid; return db.collection('users').doc(uid).collection('transactions'); }

    async function addIncome({category, amount, note}){
      const income = Number(amount||0);
      if(!income || income <= 0) throw new Error('จำนวนเงินไม่ถูกต้อง');
      const today = toYMD(new Date());
      return txCol().add({
        type:'income', category, amount: income, note: note||'',
        date: today, createdAt: firebase.firestore.FieldValue.serverTimestamp()
      });
    }

    async function addExpense({category, amount, note}){
      const expense = Number(amount||0);
      if(!expense || expense <= 0) throw new Error('จำนวนเงินไม่ถูกต้อง');
      const today = toYMD(new Date());
      return txCol().add({
        type:'expense', category, amount: expense, note: note||'',
        date: today, createdAt: firebase.firestore.FieldValue.serverTimestamp()
      });
    }

    async function getTransactionsByDate(ymd){
      const snap = await txCol().where('date','==',ymd).orderBy('createdAt','asc').get();
      return snap.docs.map(d=>({id:d.id, ...d.data()}));
    }

    // ====== Summary (Yesterday) ======
    async function renderYesterday(){
      const y = getYesterday();
      const ymd = toYMD(y);
      qs('#yesterdayLabel').textContent = 'วันที่: '+ymd;
      const list = await getTransactionsByDate(ymd);
      let totalIncome = 0, totalExpense = 0;
      list.forEach(x=>{ if(x.type==='income') totalIncome += x.amount; else totalExpense += x.amount; });
      const saving = +(totalIncome * 0.30).toFixed(2);
      const spendable = totalIncome * 0.70;
      const remaining = +(spendable - totalExpense).toFixed(2);

      qs('#sumIncome').textContent = totalIncome.toLocaleString();
      qs('#sumExpense').textContent = totalExpense.toLocaleString();
      qs('#sumSaving').textContent = saving.toLocaleString();
      qs('#sumRemaining').textContent = remaining.toLocaleString();

      renderChart(totalIncome, totalExpense);
    }

    // ====== Open/Close Sheets ======
    qs('#openIncome').addEventListener('click', ()=> openSheet('sheet-income'));
    qs('#openExpense').addEventListener('click', ()=> openSheet('sheet-expense'));

    // ====== Save Buttons ======
    qs('#saveIncome').addEventListener('click', async ()=>{
      const category = qs('#incomeCategory').value;
      const amount = qs('#incomeAmount').value;
      const note = qs('#incomeNote').value;
      try{ await addIncome({category, amount, note}); closeSheet('sheet-income');
        // Clear fields
        qs('#incomeAmount').value=''; qs('#incomeNote').value='';
        // Rerender yesterday in case today==yesterday for testing etc.
        renderYesterday();
      }catch(e){ alert(e.message); }
    });

    qs('#saveExpense').addEventListener('click', async ()=>{
      const category = qs('#expenseCategory').value;
      const amount = qs('#expenseAmount').value;
      const note = qs('#expenseNote').value;
      try{ await addExpense({category, amount, note}); closeSheet('sheet-expense');
        qs('#expenseAmount').value=''; qs('#expenseNote').value='';
        renderYesterday();
      }catch(e){ alert(e.message); }
    });
  </script>
</body>
</html>
